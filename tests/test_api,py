"""
Test the FastAPI endpoints
"""
import requests
import json
from typing import Dict, List

# API base URL
BASE_URL = "http://localhost:8000"


def test_health_check():
    """Test health check endpoint"""
    response = requests.get(f"{BASE_URL}/health")
    print("Health Check Response:")
    print(json.dumps(response.json(), indent=2))
    assert response.status_code == 200
    assert response.json()["status"] == "healthy"
    print("✅ Health check passed\n")


def test_single_prediction():
    """Test single prediction endpoint"""
    
    # Test data - normal operation
    normal_data = {
        "air_temperature": 298.1,
        "process_temperature": 308.6,
        "rotational_speed": 1551,
        "torque": 42.8,
        "tool_wear": 0,
        "product_type": "M"
    }
    
    response = requests.post(f"{BASE_URL}/predict", json=normal_data)
    print("Single Prediction (Normal) Response:")
    print(json.dumps(response.json(), indent=2))
    assert response.status_code == 200
    print("✅ Normal prediction passed\n")
    
    # Test data - high risk
    high_risk_data = {
        "air_temperature": 302.5,
        "process_temperature": 312.0,
        "rotational_speed": 2800,
        "torque": 70.0,
        "tool_wear": 200,
        "product_type": "H"
    }
    
    response = requests.post(f"{BASE_URL}/predict", json=high_risk_data)
    print("Single Prediction (High Risk) Response:")
    print(json.dumps(response.json(), indent=2))
    assert response.status_code == 200
    print("✅ High risk prediction passed\n")


def test_batch_prediction():
    """Test batch prediction endpoint"""
    
    batch_data = {
        "data": [
            {
                "air_temperature": 298.1,
                "process_temperature": 308.6,
                "rotational_speed": 1551,
                "torque": 42.8,
                "tool_wear": 0,
                "product_type": "M"
            },
            {
                "air_temperature": 299.5,
                "process_temperature": 310.2,
                "rotational_speed": 1650,
                "torque": 45.0,
                "tool_wear": 50,
                "product_type": "L"
            },
            {
                "air_temperature": 301.0,
                "process_temperature": 311.5,
                "rotational_speed": 2500,
                "torque": 60.0,
                "tool_wear": 150,
                "product_type": "H"
            }
        ]
    }
    
    response = requests.post(f"{BASE_URL}/batch_predict", json=batch_data)
    print("Batch Prediction Response:")
    result = response.json()
    print(f"Summary: {json.dumps(result['summary'], indent=2)}")
    print(f"First prediction: {json.dumps(result['predictions'][0], indent=2)}")
    assert response.status_code == 200
    assert len(result["predictions"]) == 3
    print("✅ Batch prediction passed\n")


def test_model_info():
    """Test model info endpoint"""
    response = requests.get(f"{BASE_URL}/model_info")
    print("Model Info Response:")
    print(json.dumps(response.json(), indent=2))
    assert response.status_code == 200
    print("✅ Model info passed\n")


def run_stress_test():
    """Simple stress test"""
    import time
    
    print("Running stress test (100 requests)...")
    
    test_data = {
        "air_temperature": 298.5,
        "process_temperature": 309.0,
        "rotational_speed": 1600,
        "torque": 43.0,
        "tool_wear": 25,
        "product_type": "M"
    }
    
    start_time = time.time()
    successful = 0
    failed = 0
    
    for i in range(100):
        try:
            response = requests.post(f"{BASE_URL}/predict", json=test_data, timeout=2)
            if response.status_code == 200:
                successful += 1
            else:
                failed += 1
        except:
            failed += 1
        
        if (i + 1) % 20 == 0:
            print(f"  Completed {i + 1} requests...")
    
    end_time = time.time()
    duration = end_time - start_time
    
    print(f"\nStress Test Results:")
    print(f"  Total requests: 100")
    print(f"  Successful: {successful}")
    print(f"  Failed: {failed}")
    print(f"  Duration: {duration:.2f} seconds")
    print(f"  Requests/second: {100/duration:.2f}")
    
    if successful == 100:
        print("✅ Stress test passed\n")
    else:
        print(f"⚠️ Stress test completed with {failed} failures\n")


def main():
    """Run all tests"""
    print("="*60)
    print("TESTING PREDICTIVE MAINTENANCE API")
    print("="*60)
    print()
    
    try:
        # Check if API is running
        response = requests.get(BASE_URL, timeout=2)
        print(f"API is running at {BASE_URL}")
        print()
    except:
        print(f"❌ API is not running at {BASE_URL}")
        print("Please start the API first:")
        print("  python src/api/app.py")
        print("  or")
        print("  docker-compose up")
        return
    
    # Run tests
    test_health_check()
    test_single_prediction()
    test_batch_prediction()
    test_model_info()
    run_stress_test()
    
    print("="*60)
    print("ALL TESTS COMPLETED!")
    print("="*60)


if __name__ == "__main__":
    main()